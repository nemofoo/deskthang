diff --git a/GC9A01.c b/GC9A01.c
index 688c5ec..888fedb 100644
--- a/GC9A01.c
+++ b/GC9A01.c
@@ -2,27 +2,17 @@
 
 #define ORIENTATION 2   // Set the display orientation 0,1,2,3
 
-// Command codes:
-#define COL_ADDR_SET        0x2A
-#define ROW_ADDR_SET        0x2B
-#define MEM_WR              0x2C
-#define COLOR_MODE          0x3A
-#define COLOR_MODE__12_BIT  0x03
-#define COLOR_MODE__16_BIT  0x05
-#define COLOR_MODE__18_BIT  0x06
-#define MEM_WR_CONT         0x3C
-
-static void GC9A01_write_command(uint8_t cmd) {
-    GC9A01_set_data_command(0);
+static void GC9A01_write_data(uint8_t *data, size_t len) {
+    GC9A01_set_data_command(1);
     GC9A01_set_chip_select(0);
-    GC9A01_spi_tx(&cmd, sizeof(cmd));
+    GC9A01_spi_tx(data, len);
     GC9A01_set_chip_select(1);
 }
 
-static void GC9A01_write_data(uint8_t *data, size_t len) {
-    GC9A01_set_data_command(1);
+void GC9A01_write_command(uint8_t cmd) {
+    GC9A01_set_data_command(0);
     GC9A01_set_chip_select(0);
-    GC9A01_spi_tx(data, len);
+    GC9A01_spi_tx(&cmd, sizeof(cmd));
     GC9A01_set_chip_select(1);
 }
 
@@ -96,17 +86,17 @@ void GC9A01_init(void) {
     GC9A01_write_command(0x36);
     
 #if ORIENTATION == 0
-    GC9A01_write_byte(0x18);
+    GC9A01_write_byte(ORIENTATION_0);
 #elif ORIENTATION == 1
-    GC9A01_write_byte(0x28);
+    GC9A01_write_byte(ORIENTATION_90);
 #elif ORIENTATION == 2
-    GC9A01_write_byte(0x48);
+    GC9A01_write_byte(ORIENTATION_180);
 #else
-    GC9A01_write_byte(0x88);
+    GC9A01_write_byte(ORIENTATION_270);
 #endif
     
-    GC9A01_write_command(COLOR_MODE);
-    GC9A01_write_byte(COLOR_MODE__16_BIT);
+    GC9A01_write_command(GC9A01_COLOR_MODE);
+    GC9A01_write_byte(GC9A01_COLOR_MODE__16_BIT);
     
     GC9A01_write_command(0x90);
     GC9A01_write_byte(0x08);
@@ -201,76 +191,6 @@ void GC9A01_init(void) {
     GC9A01_write_command(0xE8);
     GC9A01_write_byte(0x34);
     
-    GC9A01_write_command(0x62);
-    GC9A01_write_byte(0x18);
-    GC9A01_write_byte(0x0D);
-    GC9A01_write_byte(0x71);
-    GC9A01_write_byte(0xED);
-    GC9A01_write_byte(0x70);
-    GC9A01_write_byte(0x70);
-    GC9A01_write_byte(0x18);
-    GC9A01_write_byte(0x0F);
-    GC9A01_write_byte(0x71);
-    GC9A01_write_byte(0xEF);
-    GC9A01_write_byte(0x70);
-    GC9A01_write_byte(0x70);
-    
-    GC9A01_write_command(0x63);
-    GC9A01_write_byte(0x18);
-    GC9A01_write_byte(0x11);
-    GC9A01_write_byte(0x71);
-    GC9A01_write_byte(0xF1);
-    GC9A01_write_byte(0x70);
-    GC9A01_write_byte(0x70);
-    GC9A01_write_byte(0x18);
-    GC9A01_write_byte(0x13);
-    GC9A01_write_byte(0x71);
-    GC9A01_write_byte(0xF3);
-    GC9A01_write_byte(0x70);
-    GC9A01_write_byte(0x70);
-    
-    GC9A01_write_command(0x64);
-    GC9A01_write_byte(0x28);
-    GC9A01_write_byte(0x29);
-    GC9A01_write_byte(0xF1);
-    GC9A01_write_byte(0x01);
-    GC9A01_write_byte(0xF1);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x07);
-    
-    GC9A01_write_command(0x66);
-    GC9A01_write_byte(0x3C);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0xCD);
-    GC9A01_write_byte(0x67);
-    GC9A01_write_byte(0x45);
-    GC9A01_write_byte(0x45);
-    GC9A01_write_byte(0x10);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x00);
-    
-    GC9A01_write_command(0x67);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x3C);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x01);
-    GC9A01_write_byte(0x54);
-    GC9A01_write_byte(0x10);
-    GC9A01_write_byte(0x32);
-    GC9A01_write_byte(0x98);
-    
-    GC9A01_write_command(0x74);
-    GC9A01_write_byte(0x10);
-    GC9A01_write_byte(0x85);
-    GC9A01_write_byte(0x80);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x00);
-    GC9A01_write_byte(0x4E);
-    GC9A01_write_byte(0x00);
-    
     GC9A01_write_command(0x98);
     GC9A01_write_byte(0x3e);
     GC9A01_write_byte(0x07);
@@ -282,35 +202,32 @@ void GC9A01_init(void) {
     GC9A01_delay(120);
     GC9A01_write_command(0x29);
     GC9A01_delay(20);
-    
 }
 
 void GC9A01_set_frame(struct GC9A01_frame frame) {
-
     uint8_t data[4];
     
-    GC9A01_write_command(COL_ADDR_SET);
+    GC9A01_write_command(GC9A01_COL_ADDR_SET);
     data[0] = (frame.start.X >> 8) & 0xFF;
     data[1] = frame.start.X & 0xFF;
     data[2] = (frame.end.X >> 8) & 0xFF;
     data[3] = frame.end.X & 0xFF;
     GC9A01_write_data(data, sizeof(data));
 
-    GC9A01_write_command(ROW_ADDR_SET);
+    GC9A01_write_command(GC9A01_ROW_ADDR_SET);
     data[0] = (frame.start.Y >> 8) & 0xFF;
     data[1] = frame.start.Y & 0xFF;
     data[2] = (frame.end.Y >> 8) & 0xFF;
     data[3] = frame.end.Y & 0xFF;
     GC9A01_write_data(data, sizeof(data));
-    
 }
 
 void GC9A01_write(uint8_t *data, size_t len) {
-    GC9A01_write_command(MEM_WR);
+    GC9A01_write_command(GC9A01_MEM_WR);
     GC9A01_write_data(data, len);
 }
 
 void GC9A01_write_continue(uint8_t *data, size_t len) {
-    GC9A01_write_command(MEM_WR_CONT);
+    GC9A01_write_command(GC9A01_MEM_WR_CONT);
     GC9A01_write_data(data, len);
 }
diff --git a/GC9A01.h b/GC9A01.h
index 00aa451..ac6a042 100644
--- a/GC9A01.h
+++ b/GC9A01.h
@@ -8,11 +8,15 @@
 extern "C" {
 #endif
 
-// Color modes
-#define COLOR_MODE          0x3A
-#define COLOR_MODE__12_BIT  0x03
-#define COLOR_MODE__16_BIT  0x05
-#define COLOR_MODE__18_BIT  0x06
+// Command codes
+#define GC9A01_COL_ADDR_SET        0x2A
+#define GC9A01_ROW_ADDR_SET        0x2B
+#define GC9A01_MEM_WR              0x2C
+#define GC9A01_MEM_WR_CONT         0x3C
+#define GC9A01_COLOR_MODE          0x3A
+#define GC9A01_COLOR_MODE__12_BIT  0x03
+#define GC9A01_COLOR_MODE__16_BIT  0x05
+#define GC9A01_COLOR_MODE__18_BIT  0x06
 
 // Orientation
 #define ORIENTATION_0   0x18
@@ -28,6 +32,9 @@ void GC9A01_set_chip_select(uint8_t val);
 void GC9A01_delay(uint16_t ms);
 void GC9A01_spi_tx(uint8_t *data, size_t len);
 
+// Helper function to write a command
+void GC9A01_write_command(uint8_t cmd);
+
 struct GC9A01_point {
     uint16_t X, Y;
 };
diff --git a/main.c b/main.c
index dcdfabf..54b5def 100644
--- a/main.c
+++ b/main.c
@@ -6,6 +6,7 @@
 #include "colors.h"
 
 #define SPI_BAUD 10000000  // 10MHz
+#define IMAGE_SIZE (240 * 240 * 2)  // 240x240 pixels, 2 bytes per pixel (RGB565)
 
 // Pin definitions
 #define PIN_MOSI 19
@@ -58,6 +59,41 @@ void display_init(void) {
     GC9A01_init();
 }
 
+void display_raw_image(void) {
+    struct GC9A01_frame frame = {{0,0}, {239,239}};
+    GC9A01_set_frame(frame);
+    
+    // Start the write operation
+    GC9A01_write_command(GC9A01_MEM_WR);
+    
+    // Buffer for receiving image data
+    uint8_t buffer[512];
+    size_t total_received = 0;
+    
+    // Set data mode for the entire transfer
+    GC9A01_set_data_command(1);
+    GC9A01_set_chip_select(0);
+    
+    while (total_received < IMAGE_SIZE) {
+        // Read data in chunks
+        int bytes_read = 0;
+        while (bytes_read < sizeof(buffer) && total_received + bytes_read < IMAGE_SIZE) {
+            int c = getchar_timeout_us(100000);
+            if (c != PICO_ERROR_TIMEOUT) {
+                buffer[bytes_read++] = (uint8_t)c;
+            }
+        }
+        
+        if (bytes_read > 0) {
+            // Send the chunk to display
+            GC9A01_spi_tx(buffer, bytes_read);
+            total_received += bytes_read;
+        }
+    }
+    
+    GC9A01_set_chip_select(1);
+}
+
 void test_pattern_checkerboard(void) {
     struct GC9A01_frame frame = {{0,0}, {239,239}};
     GC9A01_set_frame(frame);
@@ -135,6 +171,9 @@ void set_display_pattern(char pattern) {
         case '3':
             test_pattern_gradient();
             break;
+        case 'I':
+            display_raw_image();
+            break;
     }
 }
 
